
local cjson = require('cjson')
-- local unicode = require('unicode')

local CMD_SUCCESS = 0
local CMD_FAILED = -1

local file = nil
local filename = nil
local directory_wildcard = nil
local match_directory_wildcard = nil
local file_lines_cache = {}
local file_chapter_cacke = {}
local file_seeks = {}
local file_seeks_offset = 0
local libstruct = {}
local CMD = {}
local SCMD = {}

print = function(...)
    io.output():write(...)
end

function string.split(str, sep, count)
    if not str then 
    return 
    end
    if string.find(str, sep) == nil then
        return { str }
    end

    if count==nil or count<1 then
        count = 0
    end

    local result = {}
    local n = 0
    local p = "(.-)" .. sep
    local nextPos = 1
    while true do
        n = n+1
        if (count>0 and count<=n) then
            result[n] = string.sub(str, nextPos)
            break
        end

        local s, e, substr = string.find(str, p, nextPos)
        if s==nil then
            result[n] = string.sub(str, nextPos)
            break
        else
            result[n] = substr
            nextPos = e+1
        end
    end

    return result
end

function initfile(name)
    filename = name
    table.insert(file_seeks, 0)
    local mulu = io.open("./directory_wildcard", "r")
    directory_wildcard = mulu:read('*a')
    match_directory_wildcard = "(" .. directory_wildcard .. ")"
    mulu:close()
    while true do
        local line = file:read('*l')
        if not line then break end
        table.insert(file_lines_cache, line)
        table.insert(file_seeks, file:seek('cur', 0))
        if line:find(directory_wildcard) then
            table.insert(file_chapter_cacke, {seek = file_seeks[#file_seeks - 1], seek_offset = #file_seeks - 1, chapter_name = line:match(match_directory_wildcard)})
        end
    end
    local libfile = io.open("libfile", "r")
    if libfile then
        local struct = libfile:read('*a')
        libfile:close()
        libstruct = cjson.decode(struct)
        file_seeks_offset = libstruct[filename] or 0
    end
    
    updatestruct()
end

function updatestruct()
    local libfile = io.open("./libfile", "w+")
    libstruct[filename] = file_seeks_offset
    libfile:write(cjson.encode(libstruct))
    libfile:flush()
    libfile:close()
end

function readfile(continue)
    if not file then return end
    local seek = file_seeks[file_seeks_offset]
    file:seek('set', seek)
    local line = file:read('*l')
    if line then
        if #line > 0 then
            local chapter_name
            for chapter_offset = #file_chapter_cacke, 1, -1 do
                if file_seeks[file_seeks_offset] >= file_chapter_cacke[chapter_offset].seek then
                    chapter_name = file_chapter_cacke[chapter_offset].chapter_name
                    break
                end
            end
            print(string.format("%s (%s)", line, chapter_name))
        else
            if continue then
                continue()
            end
        end
    end
end

CMD.j = function()
    if file_seeks_offset <= 1 then return end
    file_seeks_offset = file_seeks_offset - 1
    updatestruct()
    readfile(CMD.j)
end
CMD.J = CMD.j

CMD.k = function(backtracking)
    if file_seeks_offset >= #file_seeks then return end
    file_seeks_offset = file_seeks_offset + 1
    updatestruct()
    readfile(CMD.k)
end
CMD.K = CMD.k

CMD.c = function()
    for i, line in ipairs(file_lines_cache) do
        if line:find(directory_wildcard) then
            print(string.format("%s\n", line))
        end
    end
end
CMD.C = CMD.c

CMD.z = function()
    for chapter_offset = #file_chapter_cacke, 1, -1 do
        if file_seeks[file_seeks_offset] >= file_chapter_cacke[chapter_offset].seek then
            if file_chapter_cacke[chapter_offset - 1] then
                file_seeks_offset = file_chapter_cacke[chapter_offset - 1].seek_offset
            else
                file_seeks_offset = file_chapter_cacke[chapter_offset].seek_offset
            end
            break
        end
    end
    updatestruct()
    readfile()
end
CMD.Z = CMD.z

CMD.x = function()
    for chapter_offset = #file_chapter_cacke, 1, -1 do
        if file_seeks[file_seeks_offset] >= file_chapter_cacke[chapter_offset].seek then
            if file_chapter_cacke[chapter_offset + 1] then
                file_seeks_offset = file_chapter_cacke[chapter_offset + 1].seek_offset
            end
            break
        end
    end
    updatestruct()
    readfile()
end
CMD.X = CMD.x

CMD.b = function()
    print('You see this sentence, it means you see this sentence.')
end
CMD.B = CMD.b

CMD.s = function()
    readfile()
end
CMD.S = CMD.s

CMD.h = function()
    print("press 'h' for help.\n")
    print("press 's' to show current line.\n")
    print("press 'b' to show an sentence(boss key).\n")
    print("press 'j' to show last line.\n")
    print("press 'k' to show next line.\n")
    print("press 'z' to show last chapter.\n")
    print("press 'x' to show next chapter.\n")
    print("press 'c' to show chapter table of contents.\n")
    print("press 'q' to quit.\n")
    print("press 'i' to input other commond.\n")
    print("  -  input find `xxx` to show all occurrences of lines and subscripts(support lua wildcards).\n")
    print("  -  input jump `xxx` to skip to the first occurrence of the full text, often used with the 'c' and 'i find' command.")
end
CMD.H = CMD.h

function CHECK_CMD(cmd)
    if CMD[cmd] then
        return CMD_SUCCESS
    else
        return CMD_FAILED
    end
end

function EXEC_CMD(cmd)
    CMD[cmd]()
    return CMD_SUCCESS
end

SCMD.find = function(...)
    local content = ...
    -- local directory_wildcard = io.open("./directory_wildcard", "w+")
    -- directory_wildcard:write(content)
    -- directory_wildcard:flush()
    -- directory_wildcard:close()
    local is_find = false
    for i, value in ipairs(file_lines_cache) do
        if value:find(content) then
            is_find = true
            print(string.format("seek index:%s content:%s\n", i, value))
        end
    end
    if not is_find then
        print("not found, please confirm the character accuracy.\n")
    end
end

SCMD.jump = function(...)
    local content = ...
    local jump_seek
    for i, value in ipairs(file_lines_cache) do
        if value:find(content) then
            jump_seek = i
            break
        end
    end
    if jump_seek then
        file_seeks_offset = jump_seek
        updatestruct()
        readfile()
    else
        print("not found, please confirm the character accuracy.\n")
    end
end

function EXEC_SCMD(str)
    if #str <= 0 then 
        print("please enter the command and parameters, separated by spaces.")
        return 
    end
    local pack = string.split(str, ' ')
    local scmd = pack[1]
    if not scmd then
        print("please enter the command and parameters, separated by spaces.")
        return 
    end
    if SCMD[scmd] then
        SCMD[scmd](select(2, unpack(pack)))
    else
        print(string.format("'%s' command was not found, please expand it yourself.", scmd))
    end
    return CMD_SUCCESS
end

function LOAD_FILE(name)
    file = io.open(string.format("./%s", name), "r")
    if file then
        print("wait please in loading...\n")
        initfile(name)
        print("loading success, welcome come touchfish! --by Gx.\npress 'h' for help.")
        return CMD_SUCCESS
    else
        print("load failed file")
        return CMD_FAILED
    end
end

function EXIT(code)
    if file then
        file:close()
    end
end
